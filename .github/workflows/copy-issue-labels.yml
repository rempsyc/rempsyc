# .github/workflows/copy-issue-label-to-linked-pr.yml
name: Copy issue label to linked PRs (wait for link)

on:
  issues:
    types: [opened, labeled]   # opened covers issues created WITH the label

permissions:
  contents: read
  issues: write
  pull-requests: write

# Avoid parallel duplicates per issue
concurrency:
  group: mirror-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for a linked PR, then mirror the "question" label
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const TARGET = 'question'
            const {owner, repo} = context.repo
            const issue = context.payload.issue

            // Decide if we should act:
            // - on "opened": issue.labels already contains TARGET?
            // - on "labeled": was the added label TARGET?
            const labels = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name)
            const hasTargetNow = labels.includes(TARGET)
            const isTargetLabeledEvent = context.payload.action === 'labeled'
              && context.payload.label?.name === TARGET
            if (!(hasTargetNow || isTargetLabeledEvent)) {
              core.info(`Issue has no "${TARGET}" label; nothing to do.`)
              return
            }

            // Helper: find PRs linked to this issue (covers sidebar link & "Fixes #X")
            async function findLinkedPRs() {
              const events = await github.paginate(
                github.rest.issues.listEventsForTimeline,
                {
                  owner, repo, issue_number: issue.number, per_page: 100,
                  mediaType: { previews: ['mockingbird'] }
                }
              )
              const prs = [...new Set(
                events
                  .filter(e =>
                    (e.event === 'connected' || e.event === 'cross-referenced') &&
                    e.source?.issue?.pull_request
                  )
                  .map(e => e.source.issue.number)
              )]
              return prs
            }

            // Poll up to 10 minutes for a PR link to appear
            const deadline = Date.now() + 10 * 60 * 1000
            let prs = await findLinkedPRs()
            while (prs.length === 0 && Date.now() < deadline) {
              core.info('No linked PR yet; waiting 20sâ€¦')
              await new Promise(r => setTimeout(r, 20_000))
              prs = await findLinkedPRs()
            }
            if (prs.length === 0) {
              core.info('No linked PR found before timeout. Exiting.')
              return
            }

            // Add the label to each linked PR
            for (const pr of prs) {
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr, labels: [TARGET]
              })
              core.info(`Added "${TARGET}" to PR #${pr}`)
            }
